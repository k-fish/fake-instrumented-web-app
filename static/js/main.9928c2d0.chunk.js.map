{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","onClick","foo","Boolean","window","location","hostname","match","Sentry","dsn","integrations","ApmIntegrations","Tracing","tracesSampleRate","timeout","wait","Promise","resolve","setTimeout","fakeTracingFunction","time","a","maxJitter","jitterLabel","transaction","name","span","startChild","op","jitter","parseInt","Math","random","finish","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,kNC0B5BC,MArBf,WAKE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,+CAGA,2BACE,4BAAQC,QAZhB,WACEC,QAWM,qBCNUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCTNC,IAAY,CACVC,IAAK,4EACLC,aAAc,CACZ,IAAIC,IAAgBC,SAEtBC,iBAAkB,IAGpB,IAAMC,EAAU,SAACC,GAAD,OAAU,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAE/DI,EAAmB,uCAAG,WAAOC,GAAP,mCAAAC,EAAA,6DAAaC,EAAb,+BAAyB,EAC/CC,EAAcD,EAAY,UAAY,GACpCE,EAAchB,IAAwB,CAACiB,KAAK,oBAAD,OAAsBL,GAAtB,OAA6BG,KACxEG,EAAOF,EAAYG,WAAW,CAACC,GAAI,cAEnCC,EAASC,SAASR,EAAYS,KAAKC,SAAU,IALzB,SAMpBlB,EAAQM,EAAOS,GANK,OAQ1BH,EAAKO,SACLT,EAAYS,SATc,2CAAH,sDAYzBd,EAAoB,EAAG,KACvBA,EAAoB,GAAI,IACxBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,IAAM,KAC1BA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,IAAM,KAE1Be,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9928c2d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n/* eslint-disable no-undef */\nfunction App() {\n  function callMethodThatDoesntExist() {\n    foo();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Test Application\n        </p>\n        <p>\n          <button onClick={callMethodThatDoesntExist}>Broken Button</button>\n        </p>\n      </header>\n    </div>\n  );\n}\n/* eslint-enable no-undef */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as Sentry from '@sentry/browser';\nimport { Integrations as ApmIntegrations } from '@sentry/apm';\n\nSentry.init({\n  dsn: \"https://4319117d362641cda31914679645d2b6@o408219.ingest.sentry.io/5278709\",\n  integrations: [\n    new ApmIntegrations.Tracing(),\n  ],\n  tracesSampleRate: 1.0,\n});\n\nconst timeout = (wait) => new Promise(resolve => setTimeout(resolve, wait));\n\nconst fakeTracingFunction = async (time, maxJitter = 0) => {\n  let jitterLabel = maxJitter ? '-jitter' : '';\n  const transaction = Sentry.startTransaction({name: `test-transaction-${time}${jitterLabel}`});\n  const span = transaction.startChild({op: 'functionX'}); // This function returns a Span\n\n  const jitter = parseInt(maxJitter * Math.random(), 10);\n  await timeout(time + jitter);\n\n  span.finish(); // Remember that only finished spans will be sent with the transaction\n  transaction.finish(); // Finishing the transaction will send it to Sentry\n};\n\nfakeTracingFunction(1, 2000);\nfakeTracingFunction(10, 90);\nfakeTracingFunction(100);\nfakeTracingFunction(200);\nfakeTracingFunction(300);\nfakeTracingFunction(400);\nfakeTracingFunction(500);\nfakeTracingFunction(1000);\nfakeTracingFunction(1000, 400); // for misery 1200 w/ jitter\nfakeTracingFunction(1500);\nfakeTracingFunction(2000);\nfakeTracingFunction(3000, 7000);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}